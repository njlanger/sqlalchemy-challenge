JUPYTER NOTEBOOK (Part 1 - Analyze and explore the climate data):
BOX 1:
%matplotlib inline
from matplotlib import style
style.use('fivethirtyeight')
import matplotlib.pyplot as plt

BOX 2:
import numpy as np
import pandas as pd
import datetime as dt

REFLECT TABLES INTO SQLALCHEMY ORM

BOX 3:
# Python SQL toolkit and Object Relational Mapper
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func

BOX 4:
# create engine to hawaii.sqlite
engine = create_engine("sqlite:///sqlalchemy-challenge/Surfs_Up/Resources/hawaii.sqlite")

BOX 5:
# reflect an existing database into a new model
Base = automap_base()

# reflect the tables
Base.prepare(autoload_with=engine)

BOX 6:
# View all of the classes that automap found
Base.classes.keys()

BOX 7:
# Save references to each table
Measurement = Base.classes.measurement
Station = Base.classes.station

BOX 8:
# Create our session (link) from Python to the DB
session = Session(engine)

BOX 9:
# Display the row's columns and data in dictionary format
first_row = session.query(Measurement).first()
first_row.__dict__

EXPLORATORY PRECIPITATION ANALYSIS 

BOX 10:
# Find the most recent date in the data set.
recent_date=session.query(Measurement.date).order_by(Measurement.date.desc()).first()[0]
recent_date

BOX 11:
# Design a query to retrieve the last 12 months of precipitation data and plot the results.

# Covert most recent date from string to 'date format'
recent_date=dt.datetime.strptime(recent_date, '%Y-%m-%d')

# Calculate 12 months ago
one_yr_ago = recent_date - dt.timedelta(days=365)

# Query to retreive precep data
precip_data = session.query(Measurement.date, Measurement.prcp).filter(Measurement.date >= one_yr_ago).all()

# Store the results in a DF, with date sorted by most recent first
precip_df = pd.DataFrame(precip_data, columns=['Date', 'Precipitation']).sort_values(by='Date', ascending=False)
precip_df

BOX 12:
# Use Pandas Plotting with Matplotlib to plot the data
plt.figure(figsize=(10, 6))
plt.bar(precip_df['Date'], precip_df['Precipitation'], label='Precipitation')
plt.ylabel('Precipitation (inches)')
plt.title('Precipitation Data for the Last 12 Months')
# set x-axis ticks to every nth date
n=360
plt.xticks(precip_df['Date'][::n],rotation =45)
plt.legend()
plt.tight_layout()
plt.show()

BOX 13:
# Use Pandas to calculate the summary statistics for the precipitation data
summary_stats = precip_df['Precipitation'].describe()
summary_stats

EXPLORATORY STATION ANALYSIS

BOX 14:
# Design a query to calculate the total number of stations in the dataset
total_stations = session.query(func.count(Station.station)).first()[0]
total_stations

BOX 15:
# Design a query to find the most active stations (i.e. which stations have the most rows?)
# List the stations and their counts in descending order.
station_counts = session.query(Measurement.station, func.count(Measurement.station)).\
                    group_by(Measurement.station).\
                    order_by(func.count(Measurement.station).desc()).all()

# Display the stations and their counts
print("Most Active Stations:")
print("----------------------")
for station, count in station_counts:
    print(f"Station ID: {station}, Count: {count}")

# Station ID USC00519281 has the greatest observations

BOX 16:
# Using the most active station id from the previous query, calculate the lowest, highest, and average temperature.
most_active_station = 'USC00519281'

# Calculate the lowest, highest, and average temperature for the specified station
temperature_stats = session.query(func.min(Measurement.tobs),
                                  func.max(Measurement.tobs),
                                  func.avg(Measurement.tobs)).\
                    filter(Measurement.station == most_active_station).all()

# Display the temperature statistics
print(f"Temperature Statistics for Station {most_active_station}:")
print("---------------------------------------------")
print(f"Lowest Temperature: {temperature_stats[0][0]} F")
print(f"Highest Temperature: {temperature_stats[0][1]} F")
print(f"Average Temperature: {round(temperature_stats[0][2], 2)} F")

BOX 17:
# Using the most active station id
# Query the last 12 months of temperature observation data for this station and plot the results as a histogram (12 bins)
most_active_station = 'USC00519281'

# Query to retrieve last twelve months of data
temperature_data = session.query(Measurement.date, Measurement.tobs).\
                    filter(Measurement.station == most_active_station).\
                    filter(Measurement.date >= one_yr_ago).all()

# Store the results in a DataFrame
temperature_df = pd.DataFrame(temperature_data, columns=['date', 'temperature'])
temperature_df['date'] = pd.to_datetime(temperature_df['date'])

# Plot the results as a histogram
plt.figure(figsize=(10, 6))
plt.hist(temperature_df['temperature'], bins=12, edgecolor='black')
plt.xlabel('Temperature (F)')
plt.ylabel('Frequency')
plt.title(f'Temperature Observations for Station {most_active_station}\nLast 12 Months')
plt.grid(axis='y', alpha=0.75)
plt.tight_layout()
plt.show()

BOX 18:
# Close Session
session.close()


PYTHON (Part 2 - Design your climate app):

# Import dependences for Flask API
import numpy as np
import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
from flask import Flask, jsonify
from datetime import datetime, timedelta

# create engine to hawaii.sqlite
engine = create_engine("sqlite:///sqlalchemy-challenge/Surfs_Up/Resources/hawaii.sqlite")

# reflect an existing database into a new model
Base = automap_base()

# reflect the tables
Base.prepare(autoload_with=engine)

# Save references to each table
Measurement = Base.classes.measurement
Station = Base.classes.station

# Flask Setup
app = Flask(__name__)

# Flask Routes
@app.route('/')
def homepage():
    return (
        "Welcome to the Flask API!<br>"
        "Available routes:<br>"
        "/api/v1.0/precipitation<br>"
        "/api/v1.0/stations<br>"
        "/api/v1.0/tobs<br>"
        "/api/v1.0/&lt;start&gt;<br>"
        "/api/v1.0/&lt;start&gt;/&lt;end&gt;<br>"
    )

# Define the precipitation route
@app.route('/api/v1.0/precipitation')
def precipitation():#
    session = Session(engine)

    # Calculate the date 1 year ago from the last data point in the database
    last_date = session.query(func.max(Measurement.date)).scalar()
    last_date = datetime.strptime(last_date, "%Y-%m-%d")
    one_year_ago = last_date - timedelta(days=365)

    # Query precipitation data for the last 12 months
    results = session.query(Measurement.date, Measurement.prcp).filter(Measurement.date >= one_year_ago).all()

    session.close()

    # Convert the query results to a dictionary
    precipitation_data = {date: prcp for date, prcp in results}

    return jsonify(precipitation_data)

# Define the stations route
@app.route('/api/v1.0/stations')
def stations():
    session = Session(engine)

    # Query all station names
    results = session.query(Station.station).all()

    session.close()

    # Convert the query results to a list
    station_list = [station[0] for station in results]

    return jsonify(station_list)

# Define the tobs route
@app.route('/api/v1.0/tobs')
def tobs():
    session = Session(engine)

    # Find the most active station
    most_active_station = session.query(Measurement.station, func.count(Measurement.station)) \
        .group_by(Measurement.station) \
        .order_by(func.count(Measurement.station).desc()) \
        .first()[0]

    # Calculate the date 1 year ago from the last data point in the database
    last_date = session.query(func.max(Measurement.date)).filter(Measurement.station == most_active_station).scalar()
    last_date = datetime.strptime(last_date, "%Y-%m-%d")
    one_year_ago = last_date - timedelta(days=365)

    # Query temperature observations for the most active station for the last 12 months
    results = session.query(Measurement.date, Measurement.tobs) \
        .filter(Measurement.station == most_active_station) \
        .filter(Measurement.date >= one_year_ago) \
        .all()

    session.close()

    # Convert the query results to a list of dictionaries
    tobs_data = [{'date': date, 'temperature': tobs} for date, tobs in results]

    return jsonify(tobs_data)

# Define the temperature statistics route for a specified start date
@app.route('/api/v1.0/<start>')
def temperature_stats_start(start):
    session = Session(engine)

    # Convert the start parameter to a datetime object
    start_date = datetime.strptime(start, "%Y-%m-%d")

    # Query temperature statistics for dates greater than or equal to the start date
    results = session.query(Measurement.date,
                            func.min(Measurement.tobs).label('min_temp'),
                            func.avg(Measurement.tobs).label('avg_temp'),
                            func.max(Measurement.tobs).label('max_temp')
                            ) \
        .filter(Measurement.date >= start) \
        .group_by(Measurement.date) \
        .all()

    session.close()

    # Convert the query results to a list of dictionaries
    temperature_stats = [{'date': date, 'min_temp': min_temp, 'avg_temp': avg_temp, 'max_temp': max_temp}
                              for date, min_temp, avg_temp, max_temp in results]

    return jsonify(temperature_stats)

# Define the temperature statistics route for a specified start and end date
@app.route('/api/v1.0/<start>/<end>')
def temperature_stats_range(start, end):
    session = Session(engine)

    # Convert the start and end parameters to datetime objects
    start_date = datetime.strptime(start, "%Y-%m-%d")
    end_date = datetime.strptime(end, "%Y-%m-%d")

    # Query temperature statistics for the specified date range
    results = session.query(Measurement.date,
                            func.min(Measurement.tobs).label('min_temp'),
                            func.avg(Measurement.tobs).label('avg_temp'),
                            func.max(Measurement.tobs).label('max_temp')
                            ) \
        .filter(Measurement.date >= start) \
        .filter(Measurement.date <= end) \
        .group_by(Measurement.date) \
        .all()

    session.close()

    # Convert the query results to a list of dictionaries
    temperature_stats = [{'date': date, 'min_temp': min_temp, 'avg_temp': avg_temp, 'max_temp': max_temp}
                          for date, min_temp, avg_temp, max_temp in results]

    return jsonify(temperature_stats)

if __name__ == '__main__':
    app.run(debug=True)

